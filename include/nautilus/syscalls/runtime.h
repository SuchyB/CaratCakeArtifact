#ifndef _SYSCALL_RUNTIME
#define _SYSCALL_RUNTIME

/*
 * Intended to be included in Nautilus runtimes which want to use Linux syscalls.
 * NOT intended for use in separate compilation.
 */

#include <nautilus/syscalls/numbers.h>
#include <nautilus/naut_types.h>

uint64_t syscall_int80(uint64_t num, ...);
uint64_t syscall_syscall(uint64_t num, ...);

#if 1 // use syscall or not
#define SYSCALL syscall_syscall
#else
#define SYSCALL syscall_int80
#endif

#define read(X, Y, Z) ({ SYSCALL(READ, X, Y, Z); })
#define write(X, Y, Z) ({ SYSCALL(WRITE, X, Y, Z); })
#define close(X) ({ SYSCALL(CLOSE, X); })
#define open(X,Y) ({ SYSCALL(OPEN, X, Y); })
#define stat(X, Y) ({ SYSCALL(STAT, X, Y); })
#define fstat(X, Y) ({ SYSCALL(FSTAT, X, Y); })
#define lseek(X, Y, Z) ({ SYSCALL(LSEEK, X, Y, Z); })
#define fork() ({ SYSCALL(FORK); })
#define exit(X) ({ SYSCALL(EXIT, X); })
#define ftruncate(X, Y) ({ SYSCALL(FTRUNCATE, X, Y); })
#define getpid() ({ SYSCALL(GETPID); })
#define gettimeofday(X, Y) ({ SYSCALL(GETTIMEOFDAY, X, Y); })
#define settimeofday(X, Y) ({ SYSCALL(SETTIMEOFDAY, X, Y); })
#define mmap(X, Y, Z, U, V, W) ({ SYSCALL(MMAP, X, Y, Z, U, V, W); })
#define mprotect(X, Y, Z) ({ SYSCALL(MPROTECT, X, Y, Z); })
#define munmap(X, Y, Z, U, V, W) ({ SYSCALL(MUNMAP, X, Y, Z, U, V, W); })
#define nanosleep(X, Y) ({ SYSCALL(NANOSLEEP, X, Y); })
#define lstat(filename, statbuf) ({ SYSCALL(LSTAT, filename, statbuf); })
#define poll(ufds, nfds, timeout_msecs) ({ SYSCALL(POLL, ufds, nfds, timeout_msecs); })
#define brk(brk) ({ SYSCALL(BRK, brk); })
#define rt_sigaction(sig, act, oact, sigsetsize) ({ SYSCALL(RT_SIGACTION, sig, act, oact, sigsetsize); })
#define rt_sigprocmask(how, nset, oset, sigsetsize) ({ SYSCALL(RT_SIGPROCMASK, how, nset, oset, sigsetsize); })
#define rt_sigreturn() ({ SYSCALL(RT_SIGRETURN); })
#define ioctl(fd, cmd, arg) ({ SYSCALL(IOCTL, fd, cmd, arg); })
#define pread64(fd, buf, count, pos) ({ SYSCALL(PREAD64, fd, buf, count, pos); })
#define pwrite64(fd, buf, count, pos) ({ SYSCALL(PWRITE64, fd, buf, count, pos); })
#define readv(fd, vec, vlen) ({ SYSCALL(READV, fd, vec, vlen); })
#define writev(fd, vec, vlen) ({ SYSCALL(WRITEV, fd, vec, vlen); })
#define access(filename, mode) ({ SYSCALL(ACCESS, filename, mode); })
#define pipe(fildes) ({ SYSCALL(PIPE, fildes); })
#define select(n, inp, outp, exp) ({ SYSCALL(SELECT, n, inp, outp, exp); })
#define sched_yield() ({ SYSCALL(SCHED_YIELD); })
#define mremap(brk) ({ SYSCALL(MREMAP, brk); })
#define msync(start, len, flags) ({ SYSCALL(MSYNC, start, len, flags); })
#define mincore(start, len, vec) ({ SYSCALL(MINCORE, start, len, vec); })
#define madvise(start, len_in, behavior) ({ SYSCALL(MADVISE, start, len_in, behavior); })
#define shmget(key, size, shmflg) ({ SYSCALL(SHMGET, key, size, shmflg); })
#define shmat(shmid, shmaddr, shmflg) ({ SYSCALL(SHMAT, shmid, shmaddr, shmflg); })
#define shmctl(shmid, cmd, buf) ({ SYSCALL(SHMCTL, shmid, cmd, buf); })
#define dup(fildes) ({ SYSCALL(DUP, fildes); })
#define dup2(oldfd, newfd) ({ SYSCALL(DUP2, oldfd, newfd); })
#define pause() ({ SYSCALL(PAUSE); })
#define getitimer(which, value) ({ SYSCALL(GETITIMER, which, value); })
#define alarm(seconds) ({ SYSCALL(ALARM, seconds); })
#define setitimer(which, value, ovalue) ({ SYSCALL(SETITIMER, which, value, ovalue); })
#define sendfile(out_fd, in_fd, offset, count) ({ SYSCALL(SENDFILE, out_fd, in_fd, offset, count); })
#define socket(family, type, protocol) ({ SYSCALL(SOCKET, family, type, protocol); })
#define connect(fd, uservaddr, addrlen) ({ SYSCALL(CONNECT, fd, uservaddr, addrlen); })
#define accept(fd, upeer_sockaddr, upeer_addrlen) ({ SYSCALL(ACCEPT, fd, upeer_sockaddr, upeer_addrlen); })
#define sendto(fd, buff, len, flags, addr, addr_len) ({ SYSCALL(SENDTO, fd, buff, len, flags, addr, addr_len); })
#define recvfrom(fd, ubuf, size, flags, addr, addr_len) ({ SYSCALL(RECVFROM, fd, ubuf, size, flags, addr, addr_len); })
#define sendmsg(fd, msg, flags) ({ SYSCALL(SENDMSG, fd, msg, flags); })
#define recvmsg(fd, msg, flags) ({ SYSCALL(RECVMSG, fd, msg, flags); })
#define shutdown(fd, how) ({ SYSCALL(SHUTDOWN, fd, how); })
#define bind(fd, umyaddr, addrlen) ({ SYSCALL(BIND, fd, umyaddr, addrlen); })
#define listen(fd, backlog) ({ SYSCALL(LISTEN, fd, backlog); })
#define getsockname(usockaddr, usockaddr_len) ({ SYSCALL(GETSOCKNAME, usockaddr, usockaddr_len); })
#define getpeername(usockaddr, usockaddr_len) ({ SYSCALL(GETPEERNAME, usockaddr, usockaddr_len); })
#define socketpair(family, type, protocol) ({ SYSCALL(SOCKETPAIR, family, type, protocol); })
#define setsockopt(usockvec) ({ SYSCALL(SETSOCKOPT, usockvec); })
#define getsockopt(fd, level, optname, optval, optlen) ({ SYSCALL(GETSOCKOPT, fd, level, optname, optval, optlen); })
#define clone(fd, level, optname, optval, optlen) ({ SYSCALL(CLONE, fd, level, optname, optval, optlen); })
#define vfork() ({ SYSCALL(VFORK); })
#define execve(filename, argv, envp) ({ SYSCALL(EXECVE, filename, argv, envp); })
#define wait4(upid, stat_addr, options, ru) ({ SYSCALL(WAIT4, upid, stat_addr, options, ru); })
#define kill(pid, sig) ({ SYSCALL(KILL, pid, sig); })
#define uname(name) ({ SYSCALL(UNAME, name); })
#define semget(key, nsems, semflg) ({ SYSCALL(SEMGET, key, nsems, semflg); })
#define semop(semid, tsops, nsops) ({ SYSCALL(SEMOP, semid, tsops, nsops); })
#define semctl(semid, semnum, cmd, arg) ({ SYSCALL(SEMCTL, semid, semnum, cmd, arg); })
#define shmdt(shmaddr) ({ SYSCALL(SHMDT, shmaddr); })
#define msgget(key, msgflg) ({ SYSCALL(MSGGET, key, msgflg); })
#define msgsnd(msqid, msgp, msgsz, msgflg) ({ SYSCALL(MSGSND, msqid, msgp, msgsz, msgflg); })
#define msgrcv(msqid, msgp, msgsz, msgtyp, msgflg) ({ SYSCALL(MSGRCV, msqid, msgp, msgsz, msgtyp, msgflg); })
#define msgctl(msqid, cmd, buf) ({ SYSCALL(MSGCTL, msqid, cmd, buf); })
#define fcntl(fd, cmd, arg) ({ SYSCALL(FCNTL, fd, cmd, arg); })
#define flock(fd, cmd) ({ SYSCALL(FLOCK, fd, cmd); })
#define fsync(fd) ({ SYSCALL(FSYNC, fd); })
#define fdatasync(fd) ({ SYSCALL(FDATASYNC, fd); })
#define truncate(path, length) ({ SYSCALL(TRUNCATE, path, length); })
#define getdents(fd, dirent, count) ({ SYSCALL(GETDENTS, fd, dirent, count); })
#define getcwd(buf, size) ({ SYSCALL(GETCWD, buf, size); })
#define chdir(filename) ({ SYSCALL(CHDIR, filename); })
#define fchdir(fd) ({ SYSCALL(FCHDIR, fd); })
#define rename(oldname, newname) ({ SYSCALL(RENAME, oldname, newname); })
#define mkdir(pathname, mode) ({ SYSCALL(MKDIR, pathname, mode); })
#define rmdir(pathname) ({ SYSCALL(RMDIR, pathname); })
#define creat(pathname, mode) ({ SYSCALL(CREAT, pathname, mode); })
#define link(oldname, newname) ({ SYSCALL(LINK, oldname, newname); })
#define unlink(pathname) ({ SYSCALL(UNLINK, pathname); })
#define symlink(oldname, newname) ({ SYSCALL(SYMLINK, oldname, newname); })
#define readlink(path, buf, bufsiz) ({ SYSCALL(READLINK, path, buf, bufsiz); })
#define chmod(filename, mode) ({ SYSCALL(CHMOD, filename, mode); })
#define fchmod(fd, mode) ({ SYSCALL(FCHMOD, fd, mode); })
#define chown(filename, uservaddr, group) ({ SYSCALL(CHOWN, filename, uservaddr, group); })
#define fchown(fd, uservaddr, group) ({ SYSCALL(FCHOWN, fd, uservaddr, group); })
#define lchown(filename, uservaddr, group) ({ SYSCALL(LCHOWN, filename, uservaddr, group); })
#define umask(mask) ({ SYSCALL(UMASK, mask); })
#define getrlimit(resource, rlim) ({ SYSCALL(GETRLIMIT, resource, rlim); })
#define getrusage(who, ru) ({ SYSCALL(GETRUSAGE, who, ru); })
#define sysinfo(info) ({ SYSCALL(SYSINFO, info); })
#define times(tbuf) ({ SYSCALL(TIMES, tbuf); })
#define ptrace(request, pid, addrlen, data) ({ SYSCALL(PTRACE, request, pid, addrlen, data); })
#define getuid() ({ SYSCALL(GETUID); })
#define syslog(type, buf, len) ({ SYSCALL(SYSLOG, type, buf, len); })
#define getgid() ({ SYSCALL(GETGID); })
#define setuid(uid) ({ SYSCALL(SETUID, uid); })
#define setgid(gid) ({ SYSCALL(SETGID, gid); })
#define geteuid() ({ SYSCALL(GETEUID); })
#define getegid() ({ SYSCALL(GETEGID); })
#define setpgid(pid, pgid) ({ SYSCALL(SETPGID, pid, pgid); })
#define getppid() ({ SYSCALL(GETPPID); })
#define getpgrp() ({ SYSCALL(GETPGRP); })
#define setsid() ({ SYSCALL(SETSID); })
#define setreuid(ruid, euid) ({ SYSCALL(SETREUID, ruid, euid); })
#define setregid(rgid, egid) ({ SYSCALL(SETREGID, rgid, egid); })
#define getgroups(gidsetsize, grouplist) ({ SYSCALL(GETGROUPS, gidsetsize, grouplist); })
#define setgroups(gidsetsize, grouplist) ({ SYSCALL(SETGROUPS, gidsetsize, grouplist); })
#define setresuid(ruid, euid, suid) ({ SYSCALL(SETRESUID, ruid, euid, suid); })
#define getresuid(ruidp, euidp, suidp) ({ SYSCALL(GETRESUID, ruidp, euidp, suidp); })
#define setresgid(rgid, egid, sgid) ({ SYSCALL(SETRESGID, rgid, egid, sgid); })
#define getresgid(rgidp, egidp, sgidp) ({ SYSCALL(GETRESGID, rgidp, egidp, sgidp); })
#define getpgid(pid) ({ SYSCALL(GETPGID, pid); })
#define setfsuid(uid) ({ SYSCALL(SETFSUID, uid); })
#define setfsgid(gid) ({ SYSCALL(SETFSGID, gid); })
#define getsid(pid) ({ SYSCALL(GETSID, pid); })
#define capget(header, dataptr) ({ SYSCALL(CAPGET, header, dataptr); })
#define capset(header, data) ({ SYSCALL(CAPSET, header, data); })
#define rt_sigpending(uset, sigsetsize) ({ SYSCALL(RT_SIGPENDING, uset, sigsetsize); })
#define rt_sigtimedwait(uthese, uinfo, uts, sigsetsize) ({ SYSCALL(RT_SIGTIMEDWAIT, uthese, uinfo, uts, sigsetsize); })
#define rt_sigqueueinfo(pid, sig, uinfo) ({ SYSCALL(RT_SIGQUEUEINFO, pid, sig, uinfo); })
#define rt_sigsuspend(unewset, sigsetsize) ({ SYSCALL(RT_SIGSUSPEND, unewset, sigsetsize); })
#define sigaltstack(uss, uoss) ({ SYSCALL(SIGALTSTACK, uss, uoss); })
#define utime(filename, times) ({ SYSCALL(UTIME, filename, times); })
#define mknod(filename, mode, dev) ({ SYSCALL(MKNOD, filename, mode, dev); })
#define uselib(library) ({ SYSCALL(USELIB, library); })
#define personality(personality) ({ SYSCALL(PERSONALITY, personality); })
#define ustat(dev, ubuf) ({ SYSCALL(USTAT, dev, ubuf); })
#define statfs(pathname, buf) ({ SYSCALL(STATFS, pathname, buf); })
#define fstatfs(fd, buf) ({ SYSCALL(FSTATFS, fd, buf); })
#define sysfs(option, arg1, arg2) ({ SYSCALL(SYSFS, option, arg1, arg2); })
#define getpriority(which, who) ({ SYSCALL(GETPRIORITY, which, who); })
#define setpriority(which, who, niceval) ({ SYSCALL(SETPRIORITY, which, who, niceval); })
#define sched_setparam(pid, param) ({ SYSCALL(SCHED_SETPARAM, pid, param); })
#define sched_getparam(pid, param) ({ SYSCALL(SCHED_GETPARAM, pid, param); })
#define sched_setscheduler(pid, policy, param) ({ SYSCALL(SCHED_SETSCHEDULER, pid, policy, param); })
#define sched_getscheduler(pid) ({ SYSCALL(SCHED_GETSCHEDULER, pid); })
#define sched_get_priority_max(policy) ({ SYSCALL(SCHED_GET_PRIORITY_MAX, policy); })
#define sched_get_priority_min(policy) ({ SYSCALL(SCHED_GET_PRIORITY_MIN, policy); })
#define sched_rr_get_interval(pid, interval) ({ SYSCALL(SCHED_RR_GET_INTERVAL, pid, interval); })
#define mlock(start, len) ({ SYSCALL(MLOCK, start, len); })
#define munlock(start, len) ({ SYSCALL(MUNLOCK, start, len); })
#define mlockall(start, len) ({ SYSCALL(MLOCKALL, start, len); })
#define munlockall() ({ SYSCALL(MUNLOCKALL); })
#define vhangup() ({ SYSCALL(VHANGUP); })
#define modify_ldt(func, ptr, bytecount) ({ SYSCALL(MODIFY_LDT, func, ptr, bytecount); })
#define pivot_root(new_root, put_old) ({ SYSCALL(PIVOT_ROOT, new_root, put_old); })
#define _sysctl(args) ({ SYSCALL(_SYSCTL, args); })
#define prctl(option, arg2, arg3, arg4, arg5) ({ SYSCALL(PRCTL, option, arg2, arg3, arg4, arg5); })
#define arch_prctl(task, code, addrlen) ({ SYSCALL(ARCH_PRCTL, task, code, addrlen); })
#define adjtimex(txc_p) ({ SYSCALL(ADJTIMEX, txc_p); })
#define setrlimit(resource, rlim) ({ SYSCALL(SETRLIMIT, resource, rlim); })
#define chroot(filename) ({ SYSCALL(CHROOT, filename); })
#define sync() ({ SYSCALL(SYNC); })
#define acct(name) ({ SYSCALL(ACCT, name); })
#define mount(dev_name, dir_name, type, flags, data) ({ SYSCALL(MOUNT, dev_name, dir_name, type, flags, data); })
#define umount2(name, flags) ({ SYSCALL(UMOUNT2, name, flags); })
#define swapon(specialfile, swap_flags) ({ SYSCALL(SWAPON, specialfile, swap_flags); })
#define swapoff(specialfile) ({ SYSCALL(SWAPOFF, specialfile); })
#define reboot(magic1, magic2, cmd, arg) ({ SYSCALL(REBOOT, magic1, magic2, cmd, arg); })
#define sethostname(name, len) ({ SYSCALL(SETHOSTNAME, name, len); })
#define setdomainname(name, len) ({ SYSCALL(SETDOMAINNAME, name, len); })
#define iopl(level) ({ SYSCALL(IOPL, level); })
#define ioperm(from, num, turn_on) ({ SYSCALL(IOPERM, from, num, turn_on); })
#define create_module() ({ SYSCALL(CREATE_MODULE); })
#define init_module(umod, len, uargs) ({ SYSCALL(INIT_MODULE, umod, len, uargs); })
#define delete_module(name_user, flags) ({ SYSCALL(DELETE_MODULE, name_user, flags); })
#define get_kernel_syms() ({ SYSCALL(GET_KERNEL_SYMS); })
#define query_module() ({ SYSCALL(QUERY_MODULE); })
#define quotactl(cmd, special, id, addr) ({ SYSCALL(QUOTACTL, cmd, special, id, addr); })
#define nfsservctl() ({ SYSCALL(NFSSERVCTL); })
#define getpmsg() ({ SYSCALL(GETPMSG); })
#define putpmsg() ({ SYSCALL(PUTPMSG); })
#define afs_syscall() ({ SYSCALL(AFS_SYSCALL); })
#define tuxcall() ({ SYSCALL(TUXCALL); })
#define security() ({ SYSCALL(SECURITY); })
#define gettid() ({ SYSCALL(GETTID); })
#define readahead(fd, offset, count) ({ SYSCALL(READAHEAD, fd, offset, count); })
#define setxattr(pathname, name, value, size, flags) ({ SYSCALL(SETXATTR, pathname, name, value, size, flags); })
#define lsetxattr(pathname, name, value, size, flags) ({ SYSCALL(LSETXATTR, pathname, name, value, size, flags); })
#define fsetxattr(fd, name, value, size, flags) ({ SYSCALL(FSETXATTR, fd, name, value, size, flags); })
#define getxattr(pathname, name, value, size) ({ SYSCALL(GETXATTR, pathname, name, value, size); })
#define lgetxattr(pathname, name, value, size) ({ SYSCALL(LGETXATTR, pathname, name, value, size); })
#define fgetxattr(fd, name, value, size) ({ SYSCALL(FGETXATTR, fd, name, value, size); })
#define listxattr(pathname, list, size) ({ SYSCALL(LISTXATTR, pathname, list, size); })
#define llistxattr(pathname, list, size) ({ SYSCALL(LLISTXATTR, pathname, list, size); })
#define flistxattr(fd, list, size) ({ SYSCALL(FLISTXATTR, fd, list, size); })
#define removexattr(pathname, name) ({ SYSCALL(REMOVEXATTR, pathname, name); })
#define lremovexattr(pathname, name) ({ SYSCALL(LREMOVEXATTR, pathname, name); })
#define fremovexattr(fd, name) ({ SYSCALL(FREMOVEXATTR, fd, name); })
#define tkill(pid, sig) ({ SYSCALL(TKILL, pid, sig); })
#define time(tloc) ({ SYSCALL(TIME, tloc); })
#define futex(usaddr, op, val, utime, uaddr2, val3) ({ SYSCALL(FUTEX, usaddr, op, val, utime, uaddr2, val3); })
#define sched_setaffinity(pid, len, user_mask_ptr) ({ SYSCALL(SCHED_SETAFFINITY, pid, len, user_mask_ptr); })
#define sched_getaffinity(pid, len, user_mask_ptr) ({ SYSCALL(SCHED_GETAFFINITY, pid, len, user_mask_ptr); })
#define set_thread_area(u_unfo) ({ SYSCALL(SET_THREAD_AREA, u_unfo); })
#define io_setup(nr_events, ctxp) ({ SYSCALL(IO_SETUP, nr_events, ctxp); })
#define io_destroy(ctx) ({ SYSCALL(IO_DESTROY, ctx); })
#define io_getevents(ctx_id, min_nr, nr, events, timeout) ({ SYSCALL(IO_GETEVENTS, ctx_id, min_nr, nr, events, timeout); })
#define io_submit(ctx_id, nr, iocbpp) ({ SYSCALL(IO_SUBMIT, ctx_id, nr, iocbpp); })
#define io_cancel(ctx_id, iocb, result) ({ SYSCALL(IO_CANCEL, ctx_id, iocb, result); })
#define get_thread_area(u_info) ({ SYSCALL(GET_THREAD_AREA, u_info); })
#define lookup_dcookie(cookie64, buf, len) ({ SYSCALL(LOOKUP_DCOOKIE, cookie64, buf, len); })
#define epoll_create(size) ({ SYSCALL(EPOLL_CREATE, size); })
#define epoll_ctl_old() ({ SYSCALL(EPOLL_CTL_OLD); })
#define epoll_wait_old() ({ SYSCALL(EPOLL_WAIT_OLD); })
#define remap_file_pages(start, size, protocol, pgoff, flags) ({ SYSCALL(REMAP_FILE_PAGES, start, size, protocol, pgoff, flags); })
#define getdents64(fd, dirent, count) ({ SYSCALL(GETDENTS64, fd, dirent, count); })
#define set_tid_address(tldptr) ({ SYSCALL(SET_TID_ADDRESS, tldptr); })
#define restart_syscall() ({ SYSCALL(RESTART_SYSCALL); })
#define semtimedop(semid, tsops, nsops, timeout) ({ SYSCALL(SEMTIMEDOP, semid, tsops, nsops, timeout); })
#define fadvise64(fd, offset, len, advice) ({ SYSCALL(FADVISE64, fd, offset, len, advice); })
#define timer_create(which_clock, timer_event_spec, creaded_timer_id) ({ SYSCALL(TIMER_CREATE, which_clock, timer_event_spec, creaded_timer_id); })
#define timer_settime(timer_id, flags, new_setting, old_setting) ({ SYSCALL(TIMER_SETTIME, timer_id, flags, new_setting, old_setting); })
#define timer_gettime(timer_id, setting) ({ SYSCALL(TIMER_GETTIME, timer_id, setting); })
#define timer_getoverrun(timer_id) ({ SYSCALL(TIMER_GETOVERRUN, timer_id); })
#define timer_delete(timer_id) ({ SYSCALL(TIMER_DELETE, timer_id); })
#define clock_settime(which_clock, tp) ({ SYSCALL(CLOCK_SETTIME, which_clock, tp); })
#define clock_gettime(which_clock, tp) ({ SYSCALL(CLOCK_GETTIME, which_clock, tp); })
#define clock_getres(which_clock, tp) ({ SYSCALL(CLOCK_GETRES, which_clock, tp); })
#define clock_nanosleep(which_clock, flags, rqtp, rmtp) ({ SYSCALL(CLOCK_NANOSLEEP, which_clock, flags, rqtp, rmtp); })
#define exit_group(error_code) ({ SYSCALL(EXIT_GROUP, error_code); })
#define epoll_wait(epfd, events, maxevents, timeout) ({ SYSCALL(EPOLL_WAIT, epfd, events, maxevents, timeout); })
#define epoll_ctl(epfd, op, fd, event) ({ SYSCALL(EPOLL_CTL, epfd, op, fd, event); })
#define tgkill(tgid, pid, sig) ({ SYSCALL(TGKILL, tgid, pid, sig); })
#define utimes(filename, utimes) ({ SYSCALL(UTIMES, filename, utimes); })
#define vserver() ({ SYSCALL(VSERVER); })
#define mbind(start, len, mode, nmask, maxnode, flags) ({ SYSCALL(MBIND, start, len, mode, nmask, maxnode, flags); })
#define set_mempolicy(mode, nmask, maxnode) ({ SYSCALL(SET_MEMPOLICY, mode, nmask, maxnode); })
#define get_mempolicy(policy, nmask, maxnode, addr, flags) ({ SYSCALL(GET_MEMPOLICY, policy, nmask, maxnode, addr, flags); })
#define mq_open(u_name, oflag, mode, u_attr) ({ SYSCALL(MQ_OPEN, u_name, oflag, mode, u_attr); })
#define mq_unlink(u_name) ({ SYSCALL(MQ_UNLINK, u_name); })
#define mq_timedsend(mqdes, u_msg_ptr, msg_len, msg_prio, u_abs_timeout) ({ SYSCALL(MQ_TIMEDSEND, mqdes, u_msg_ptr, msg_len, msg_prio, u_abs_timeout); })
#define mq_timedreceive(mqdes, u_msg_ptr, msg_len, u_msg_prio, u_abs_timeout) ({ SYSCALL(MQ_TIMEDRECEIVE, mqdes, u_msg_ptr, msg_len, u_msg_prio, u_abs_timeout); })
#define mq_notify(mqdes, u_notification) ({ SYSCALL(MQ_NOTIFY, mqdes, u_notification); })
#define mq_getsetattr(mqdes, u_mqstat, u_omqstat) ({ SYSCALL(MQ_GETSETATTR, mqdes, u_mqstat, u_omqstat); })
#define kexec_load(entry, nr_segments, segments, flags) ({ SYSCALL(KEXEC_LOAD, entry, nr_segments, segments, flags); })
#define waitid(which, upid, infop, options, ru) ({ SYSCALL(WAITID, which, upid, infop, options, ru); })
#define add_key(type, description, payload, plen, ringid) ({ SYSCALL(ADD_KEY, type, description, payload, plen, ringid); })
#define request_key(type, description, callout_info, destringid) ({ SYSCALL(REQUEST_KEY, type, description, callout_info, destringid); })
#define keyctl(option, arg2, arg3, arg4, arg5) ({ SYSCALL(KEYCTL, option, arg2, arg3, arg4, arg5); })
#define ioprio_set(which, who, ioprio) ({ SYSCALL(IOPRIO_SET, which, who, ioprio); })
#define ioprio_get(which, who) ({ SYSCALL(IOPRIO_GET, which, who); })
#define inotify_init() ({ SYSCALL(INOTIFY_INIT); })
#define inotify_add_watch(fd, pathname, mask) ({ SYSCALL(INOTIFY_ADD_WATCH, fd, pathname, mask); })
#define inotify_rm_watch(fd, wd) ({ SYSCALL(INOTIFY_RM_WATCH, fd, wd); })
#define migrate_pages(pid, maxnode, old_ndoes, new_nodes) ({ SYSCALL(MIGRATE_PAGES, pid, maxnode, old_ndoes, new_nodes); })
#define openat(dfd, filename, flags, mode) ({ SYSCALL(OPENAT, dfd, filename, flags, mode); })
#define mkdirat(dfd, pathname, mode) ({ SYSCALL(MKDIRAT, dfd, pathname, mode); })
#define mknodat(dfd, filename, mode, dev) ({ SYSCALL(MKNODAT, dfd, filename, mode, dev); })
#define fchownat(dfd, filename, user_mask_ptr, group, flag) ({ SYSCALL(FCHOWNAT, dfd, filename, user_mask_ptr, group, flag); })
#define futimesat(dfd, filename, utimes) ({ SYSCALL(FUTIMESAT, dfd, filename, utimes); })
#define newfstatat(dfd, filename, statbuf, flags) ({ SYSCALL(NEWFSTATAT, dfd, filename, statbuf, flags); })
#define unlinkat(dfd, pathname, flags) ({ SYSCALL(UNLINKAT, dfd, pathname, flags); })
#define renameat(olddfd, oldname, newdfd, newname) ({ SYSCALL(RENAMEAT, olddfd, oldname, newdfd, newname); })
#define linkat(olddfd, oldname, newdfd, newname, flags) ({ SYSCALL(LINKAT, olddfd, oldname, newdfd, newname, flags); })
#define symlinkat(oldname, newdfd, newname) ({ SYSCALL(SYMLINKAT, oldname, newdfd, newname); })
#define readlinkat(dfd, pathname, buf, bufsiz) ({ SYSCALL(READLINKAT, dfd, pathname, buf, bufsiz); })
#define fchmodat(dfd, filename, mode) ({ SYSCALL(FCHMODAT, dfd, filename, mode); })
#define faccessat(dfd, filename, mode) ({ SYSCALL(FACCESSAT, dfd, filename, mode); })
#define pselect6(n, inp, outp, exp, tsp, sig) ({ SYSCALL(PSELECT6, n, inp, outp, exp, tsp, sig); })
#define ppoll(ufds, nfds, tsp, sigmask, sigsetsize) ({ SYSCALL(PPOLL, ufds, nfds, tsp, sigmask, sigsetsize); })
#define unshare(unshare_flags) ({ SYSCALL(UNSHARE, unshare_flags); })
#define set_robust_list(header, len) ({ SYSCALL(SET_ROBUST_LIST, header, len); })
#define get_robust_list(head_ptr, len_ptr) ({ SYSCALL(GET_ROBUST_LIST, head_ptr, len_ptr); })
#define splice(fd_in, off_in, fd_out, off_out, len, flags) ({ SYSCALL(SPLICE, fd_in, off_in, fd_out, off_out, len, flags); })
#define tee(fdin, fdout, len, flags) ({ SYSCALL(TEE, fdin, fdout, len, flags); })
#define sync_file_range(fd, offset, nbytes, flags) ({ SYSCALL(SYNC_FILE_RANGE, fd, offset, nbytes, flags); })
#define vmsplice(fd, iov, nr_segs, flags) ({ SYSCALL(VMSPLICE, fd, iov, nr_segs, flags); })
#define move_pages(pid, nr_pages, pages, nodes, status, flags) ({ SYSCALL(MOVE_PAGES, pid, nr_pages, pages, nodes, status, flags); })
#define utimensat(dfd, filename, utimes, flags) ({ SYSCALL(UTIMENSAT, dfd, filename, utimes, flags); })
#define epoll_pwait(epfd, events, maxevents, timeout, sigmask, sigsetsize) ({ SYSCALL(EPOLL_PWAIT, epfd, events, maxevents, timeout, sigmask, sigsetsize); })
#define signalfd(ufd, user_mask, sizemask) ({ SYSCALL(SIGNALFD, ufd, user_mask, sizemask); })
#define timerfd_create(clockid, flags) ({ SYSCALL(TIMERFD_CREATE, clockid, flags); })
#define eventfd(count) ({ SYSCALL(EVENTFD, count); })
#define fallocate(fd, mode, offset, len) ({ SYSCALL(FALLOCATE, fd, mode, offset, len); })
#define timerfd_settime(ufd, flags, utmr, otmr) ({ SYSCALL(TIMERFD_SETTIME, ufd, flags, utmr, otmr); })
#define timerfd_gettime(ufd, otmr) ({ SYSCALL(TIMERFD_GETTIME, ufd, otmr); })
#define accept4(fd, upeer_sockaddr, upeer_addrlen, flags) ({ SYSCALL(ACCEPT4, fd, upeer_sockaddr, upeer_addrlen, flags); })
#define signalfd4(ufd, user_mask, sizemask, flags) ({ SYSCALL(SIGNALFD4, ufd, user_mask, sizemask, flags); })
#define eventfd2(count) ({ SYSCALL(EVENTFD2, count); })
#define epoll_create1(flags) ({ SYSCALL(EPOLL_CREATE1, flags); })
#define dup3(oldfd, newfd, flags) ({ SYSCALL(DUP3, oldfd, newfd, flags); })
#define pipe2(fildes, flags) ({ SYSCALL(PIPE2, fildes, flags); })
#define inotify_init1(flags) ({ SYSCALL(INOTIFY_INIT1, flags); })
#define preadv(fd, vec, vlen, pos_l, pos_h) ({ SYSCALL(PREADV, fd, vec, vlen, pos_l, pos_h); })
#define pwritev(fd, vec, vlen, pos_l, pos_h) ({ SYSCALL(PWRITEV, fd, vec, vlen, pos_l, pos_h); })
#define rt_tgsigqueueinfo(tgid, pid, sig, uinfo) ({ SYSCALL(RT_TGSIGQUEUEINFO, tgid, pid, sig, uinfo); })
#define perf_event_open(attr_uptr, pid, cpu, group_fd, flags) ({ SYSCALL(PERF_EVENT_OPEN, attr_uptr, pid, cpu, group_fd, flags); })
#define recvmmsg(fd, mmsg, vlen, flags, timeout) ({ SYSCALL(RECVMMSG, fd, mmsg, vlen, flags, timeout); })
#define fanotify_init(flags, event_f_flags) ({ SYSCALL(FANOTIFY_INIT, flags, event_f_flags); })
#define fanotify_mark(fanotify_fd, flags, mask, dfd, pathname) ({ SYSCALL(FANOTIFY_MARK, fanotify_fd, flags, mask, dfd, pathname); })
#define prlimit64(pid, resource, new_rlim, old_rlim) ({ SYSCALL(PRLIMIT64, pid, resource, new_rlim, old_rlim); })
#define name_to_handle_at(dfd, name, handle, mnt_id, flag) ({ SYSCALL(NAME_TO_HANDLE_AT, dfd, name, handle, mnt_id, flag); })
#define open_by_handle_at(mountdirfd, handle, flags) ({ SYSCALL(OPEN_BY_HANDLE_AT, mountdirfd, handle, flags); })
#define clock_adjtime(which_clock, utx) ({ SYSCALL(CLOCK_ADJTIME, which_clock, utx); })
#define syncfs(fd) ({ SYSCALL(SYNCFS, fd); })
#define sendmmsg(fd, mmsg, vlen, flags) ({ SYSCALL(SENDMMSG, fd, mmsg, vlen, flags); })
#define setns(fd, nstype) ({ SYSCALL(SETNS, fd, nstype); })
#define getcpu(cpup, nodep, unused) ({ SYSCALL(GETCPU, cpup, nodep, unused); })
#define process_vm_readv(pid, lvec, liovcnt, rvec, riovcnt, flags) ({ SYSCALL(PROCESS_VM_READV, pid, lvec, liovcnt, rvec, riovcnt, flags); })
#define process_vm_writev(pud, lvec, liovcnt, rvec, riovcnt, flags) ({ SYSCALL(PROCESS_VM_WRITEV, pud, lvec, liovcnt, rvec, riovcnt, flags); })
#define kcmp(pid1, pid2, type, idx1, idx2) ({ SYSCALL(KCMP, pid1, pid2, type, idx1, idx2); })
#define finit_module(fd, uargs, flags) ({ SYSCALL(FINIT_MODULE, fd, uargs, flags); })

#endif // _SYSCALL_RUNTIME
